#pragma once
#include <climits>
#include <thread>
#include <numeric>
#include <iterator>
#include <optional>
#include <vector>
#include <iostream>
#include <algorithm>
#include <future>

#include <chrono>
using namespace std::chrono;

/**
 * constant for scoring
 * G_INIT - penalty for starting a gap
 * G_EXT - penalty for continuing a gap 
 */
const int G_INIT = 1 ;
const int G_EXT = 1 ; 
const int MATCH = 1 ;
const int MISMATCH = -1 ;

/**
 * in article, score W <= 0 if mismatch, W > 0 if match
 */
int score3(unsigned char s1, unsigned char s2) {
    if (s1 == s2) {
        return MATCH;
    }
    return MISMATCH;
}

void leftRotation2(std::vector<int> &vector) {

    int n = vector.size() ;
    int temp = vector[0] ;
    for (int i = 0 ; i < n - 1 ; i ++) {
        vector[i] = vector[i+1] ;
    }
    vector[n-1] = temp ;
}

/**
 * Original LazySmith function - one chunk
 */
int OriginalLazySmith(unsigned char *seq1, unsigned char *seq2, int n, int m){
    std::vector<int> vHLoad(n + 1, 0), vHStore(n + 1, 0), vE(n + 1, 0), vF(n + 1, 0);
    int segLen = (n + 15) / 16;
    int dbLen = m;
    int maxScore = 0;

    for(int i = 0; i < dbLen; i++){
        std::fill(vF.begin(), vF.end(), 0);
        // int vH = (segLen - 1 < vHStore.size()) ? vHStore[segLen - 1] << 1 : 0;
        int vH = vHStore[segLen - 1] ; // << 1;
        std::swap(vHLoad, vHStore);

        for(int j = 0; j < segLen; j++) {
            // Safely compute score
            // int s = (j < n && i < m) ? score(seq1[j], seq2[i]) : 0;
            int s = score3(seq1[j], seq2[i]) ;
            vH += s;

            // Update max score
            maxScore = std::max(maxScore, vH);

            vH = std::max(vH, vE[j]);
            vH = std::max(vH, vF[j]);

            vHStore[j] = vH;

            // Calculate new vE
            // int vH_gap = vH - G_INIT;
            vH = vH - G_INIT ;
            vE[j] = vE[j] - G_EXT ;
            vE[j] = std::max(vE[j], vH) ;

            vF[j] = vF[j] - G_EXT ;
            // Calculate new vF (element-wise)
            vF[j] = std::max(vF[j], vH) ;

            // Load next H
            vH = vHLoad[j];
        }

        // // --- Lazy-F Loop ---
        leftRotation2(vF) ;

        int j = 0;
        while (std::any_of(vF.begin(), vF.end(), [&](int f){ return f > (vHStore[j] - G_INIT); })) {
            //std::cout<<"debug while loop"<<std::endl ;
            vHStore[j] = std::max(vHStore[j], vF[j]);
            vF[j] -= G_EXT;

            if (++j >= segLen) {
                leftRotation2(vF) ;
                j = 0;
            }
        }
    }

    return maxScore;
}

//this explanation was generatd using AI but it is very useful:

/**
 * Parallel Smith-Waterman using sequence chunking with std::thread
 * @param seq1 First sequence (will be chunked)
 * @param seq2 Second sequence
 * @param n Length of seq1
 * @param m Length of seq2
 * @param num_threads Number of threads to use
 * @param chunk_strategy 0=chunk seq1, 1=chunk seq2, 2=chunk longer sequence
 */
int ParallelLazySmith_threads( unsigned char *seq1, unsigned char *seq2, int n, int m, 
                      int num_threads = std::thread::hardware_concurrency(),
                      int chunkStrategy = 2 ) {
    
    //in case we have have only one thread, then we apply the normal version
    if( num_threads <= 1 )
        return OriginalLazySmith( seq1, seq2, n, m );
    

    //which DNA sequence to split up between threads for parallel processing
    //Strategy 0: always split sequence 1
    //Strategy 1: always split sequence 2
    //Strategy 2 (default one): split the sequence which is longer
    bool chunk_seq1 = false;

    if ( chunkStrategy == 0 )
        chunk_seq1 = true;
    else if ( chunkStrategy == 1 )
        chunk_seq1 = false;
    else {
        //here we chunk the longer sequence
        if( n >= m )
            chunk_seq1 = true;
        else chunk_seq1 = false;
    }

    //to sto threads and the results:
    std::vector<std::thread> threads;
    std::vector<int> results;
    std::mutex results_mutex;
    int score_max = 0;

    if ( chunk_seq1 == true ) {  //we work with n from now on

        int chunk_size = ( n + num_threads - 1 ) / num_threads;
        //so the results vector is of dimention of num_threads where each cell has the result given by each thread
        results.resize( num_threads, 0 );
        int t;

        for ( t = 0; t < num_threads; t++ ) {
            //like in the TDs
            int beginning = t * chunk_size;
            int end = std::min( beginning + chunk_size, n );
            
            if ( beginning >= n )  //base case
                break;
            
            int chunk_len = end - beginning;
            
            //now we create thread:
            threads.emplace_back([=, &results, &results_mutex]() {
                int chunk_score = OriginalLazySmith( seq1 + beginning, seq2, chunk_len, m );
                results[t] = chunk_score;
            });
        }
    } 
    else {  //here with m

        int chunk_size = ( m + num_threads - 1 ) / num_threads;
        results.resize(num_threads, 0); //same as up
        int t;

        for ( t = 0; t < num_threads; t++ ) {
            int beginning = t * chunk_size;
            int end = std::min( beginning + chunk_size, m );
            
            if ( beginning >= m ) 
                break;
            
            int chunk_len = end - beginning;
            
            //the same as before
            threads.emplace_back([=, &results, &results_mutex]() {
                int chunk_score = OriginalLazySmith( seq1, seq2 + beginning, n, chunk_len );
                results[t] = chunk_score;
            });
        }
    }

    //as in the td:
    for ( auto& t : threads )
        t.join();

    //now we get the maximum
    for ( int score_of_chunk : results )
        score_max = std::max( score_max, score_of_chunk );

    return score_max;
}

/*void runTests() {
    struct TestCase {
        std::string seq1, seq2;
        int expected_value;
    };

    std::vector<TestCase> tests = {
        { "ABDAAADB", "ADDBAABB", 2 },
        { "ABDA", "ADDB", 1 },
        { "AAA", "AAA", 3 },
        { "A", "A", 1 },
        { "A", "G", 0 },
        {
            "ATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCG",
            "GCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAG",
            1
        },
        {


            0
        },
        {


            0
        }
    };

    int passed = 0;
    std::cout << "Testing both normal and parallel versions:\n";
    std::cout << "Hardware concurrency: " << std::thread::hardware_concurrency() << " threads\n\n";

    for ( size_t i = 0; i < tests.size(); i++ ) {
        const auto& t = tests[ i ];
        
        //Test normal version(slow one)
        auto start_normal = high_resolution_clock::now();
        int normal_score = LazySmith(
            (unsigned char*)t.seq1.c_str(),
            (unsigned char*)t.seq2.c_str(),
            t.seq1.size(),
            t.seq2.size()
        );
        auto end_normal = high_resolution_clock::now();
        auto duration_normal = duration_cast<microseconds>( end_normal - start_normal );

        //Test parallel version(fast one)
        auto start_parallel = high_resolution_clock::now();
        int parallel_score = ParallelLazySmith_threads(
            (unsigned char*)t.seq1.c_str(),
            (unsigned char*)t.seq2.c_str(),
            t.seq1.size(),
            t.seq2.size()
        );
        auto end_parallel = high_resolution_clock::now();
        auto duration_parallel = duration_cast<microseconds>( end_parallel - start_parallel );


        bool normal_correct = ( normal_score == t.expected_value );
        bool parallel_correct = (parallel_score >= t.expected_value * 0.8); //Allow some deviation due to chunking

        if ( normal_correct )
            passed++;

        std::cout << "Test " << i + 1 << ":\n";

        std::cout << "  Serial:   "
                  << " Time=" << duration_normal.count() / 1000.0 << "ms\n";

        std::cout << "  Parallel: "
                  << " Time=" << duration_parallel.count() / 1000.0 << "ms"
                  << " Speedup=" << (double)duration_normal.count() / duration_parallel.count() << "x\n";
    }

    std::cout << "Summary: " << passed << "/" << tests.size() << " serial tests passed.\n";
}

int main() {

    runTests();
    return 0 ;
}*/

// Compile with: g++ -std=c++17 -O2 -pthread -o parallel_lazysmith lazySmith_parallel.cpp
// ./parallel_lazysmith
